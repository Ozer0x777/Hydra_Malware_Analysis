import os
import requests
import csv
from dotenv import load_dotenv
import argparse
from tqdm import tqdm

load_dotenv()

MALWARE_BAZAR_API_KEY = os.getenv("MALWARE_BAZAR_API_KEY")
VIRUS_TOTAL_API_KEY = os.getenv("VIRUS_TOTAL_API_KEY")
HYBRID_ANALYSIS_API_KEY = os.getenv("HYBRID_ANALYSIS_API_KEY")
JOE_SANDBOX_API_KEY = os.getenv("JOE_SANDBOX_API_KEY")
ANY_RUN_API_KEY = os.getenv("ANY_RUN_API_KEY")


class ApiResult:
    def __init__(self, api_name, file_name, sha1, is_malicious, url_analysis):
        self.api_name = api_name
        self.file_name = file_name
        self.sha1 = sha1
        self.is_malicious = is_malicious
        self.url_analysis = url_analysis


def submit_file_to_malware_bazar(file_path, api_key):
    url = "https://mb-api.abuse.ch/api/v1/submit"
    payload = {"apikey": api_key}
    files = {"file": ("file", open(file_path, "rb"))}
    response = requests.post(url, data=payload, files=files).json()
    sha1 = response.get("sha1_hash", "")
    detected = response.get("scans", {}).get("result", "Unknown")
    url_analysis = response.get("analysis_url", "")
    return ApiResult(
        'Malware Bazar',
        os.path.basename(file_path),
        sha1,
        detected,
        url_analysis
    )

def submit_file_to_virus_total(file_path, api_key):
    url = "https://www.virustotal.com/vtapi/v2/file/scan"
    params = {"apikey": api_key}
    files = {"file": ("file", open(file_path, "rb"))}
    response = requests.post(url, params=params, files=files).json()
    sha1 = response.get("sha1", "")
    response_code = response.get("response_code", -1)
    detected = False
    if response_code == 1:
        positives = response.get("positives", 0)
        if positives > 0:
            detected = True
    url_analysis = f"https://www.virustotal.com/gui/file/{sha1}/detection"
    return ApiResult(
        'Virus Total',
        os.path.basename(file_path),
        sha1,
        detected,
        url_analysis
    )

def submit_file_to_hybrid_analysis(file_path, api_key):
    url = "https://www.hybrid-analysis.com/api/v2/submit/file"
    headers = {"user-agent": "Fiddler", "api-key": api_key}
    files = {"file": ("file", open(file_path, "rb"))}
    response = requests.post(url, headers=headers, files=files).json()
    sha1 = response.get("sha1", "")
    detected = response.get("verdict", "Unknown")
    url_analysis = response.get("analysis_url", "")
    return ApiResult(
        'Hybrid Analysis',
        os.path.basename(file_path),
        sha1,
        detected,
        url_analysis
    )

def submit_file_to_joe_sandbox(file_path, api_key):
    url = "https://www.joesandbox.com/api/submit/file"
    payload = {"apikey": api_key}
    files = {"file": ("file", open(file_path, "rb"))}
    response = requests.post(url, data=payload, files=files).json()
    sha1 = response.get("sha1", "")
    detected = response.get("status", "Unknown")
    url_analysis = response.get("weburl", "")
    return ApiResult(
        'Joe Sandbox',
        os.path.basename(file_path),
        sha1,
        detected,
        url_analysis
    )

def submit_file_to_any_run(file_path, api_key):
    url = "https://api.any.run/v1/analysis/file"
    headers = {"Authorization": f"Bearer {api_key}"}
    files = {"file": ("file", open(file_path, "rb"))}
    response = requests.post(url, headers=headers, files=files)
    response_json = response.json()
    sha1 = response_json.get("sha1")
    detected_as_malicious = response_json.get("summary", {}).get("malicious", False)
    url_analysis = response_json.get("url_analysis", [])
    return ApiResult(
        'Any.run',
        os.path.basename(file_path),
        sha1,
        detected_as_malicious,
        url_analysis
    )

print("░░█ █ ▄▀█ █▀█ █░░ █▀█ █▄░█ █▀▀   █▀▄▀█ ▄▀█ █░█░█ ▄▀█ █░░ █▀█ █▀▀   ▄▀█ █▄░█ ▄▀█ █░░ █▄█ █▀ █ █▀")
print("█▄█ █ █▀█ █▄█ █▄▄ █▄█ █░▀█ █▄█   █░▀░█ █▀█ ▀▄▀▄▀ █▀█ █▄▄ █▀▄ ██▄   █▀█ █░▀█ █▀█ █▄▄ ░█░ ▄█ █ ▄█   By Ozer0x777")

def submit_files_to_apis(file_paths, apis):
    results = []

    with tqdm(total=len(file_paths), desc="Scanning files") as pbar:
        for file_path in file_paths:
            if apis == "all" or "malware_bazar" in apis:
                if MALWARE_BAZAR_API_KEY:
                    results.append(submit_file_to_malware_bazar(file_path, MALWARE_BAZAR_API_KEY))
            if apis == "all" or "virus_total" in apis:
                if VIRUS_TOTAL_API_KEY:
                    results.append(submit_file_to_virus_total(file_path, VIRUS_TOTAL_API_KEY))
            if apis == "all" or "hybrid_analysis" in apis:
                if HYBRID_ANALYSIS_API_KEY:
                    results.append(submit_file_to_hybrid_analysis(file_path, HYBRID_ANALYSIS_API_KEY))
            if apis == "all" or "joe_sandbox" in apis:
                if JOE_SANDBOX_API_KEY:
                    results.append(submit_file_to_joe_sandbox(file_path, JOE_SANDBOX_API_KEY))
            if apis == "all" or "any_run" in apis:
                if ANY_RUN_API_KEY:
                    results.append(submit_file_to_any_run(file_path, ANY_RUN_API_KEY))
            pbar.update(1)

    return results


def write_results_to_csv(file_path, results):
    if len(results) == 0:
        print('No data')
        return
    with open(file_path, "w", newline="", encoding="utf-8") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=results[0].__dict__.keys())
        writer.writeheader()
        for result in results:
            writer.writerow(result.__dict__)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--files", nargs="+", help="Path(s) to file(s) or directory/directories to be submitted", required=True)
    parser.add_argument("--apis", nargs="+", choices=["all", "malware_bazar", "virus_total", "hybrid_analysis", "joe_sandbox", "any_run"], default="all", help="API(s) to use for scanning")
    parser.add_argument("--output", default="results.csv", help="Name of file to save the results")
    args = parser.parse_args()

    file_paths = args.files
    apis = args.apis
    output_file = args.output

    files_to_submit = []
    for path in file_paths:
        if os.path.isfile(path):
            files_to_submit.append(path)
        elif os.path.isdir(path):
            for root, dirs, files in os.walk(path):
                for name in files:
                    files_to_submit.append(os.path.join(root, name))

    results = submit_files_to_apis(files_to_submit, apis)
    write_results_to_csv(output_file, results)



if __name__ == "__main__":
    main()
