import os
import requests
import json
import csv
from dotenv import load_dotenv
import argparse
from tqdm import tqdm

load_dotenv()

MALWARE_BAZAR_API_KEY = os.getenv("MALWARE_BAZAR_API_KEY")
VIRUS_TOTAL_API_KEY = os.getenv("VIRUS_TOTAL_API_KEY")
HYBRID_ANALYSIS_API_KEY = os.getenv("HYBRID_ANALYSIS_API_KEY")
JOE_SANDBOX_API_KEY = os.getenv("JOE_SANDBOX_API_KEY")
ANY_RUN_API_KEY = os.getenv("ANY_RUN_API_KEY")

def submit_file_to_malware_bazar(file_path, api_key):
    url = "https://mb-api.abuse.ch/api/v1/submit"
    payload = {"apikey": api_key}
    files = {"file": ("file", open(file_path, "rb"))}
    response = requests.post(url, data=payload, files=files)
    return response.json()

def submit_file_to_virus_total(file_path, api_key):
    url = "https://www.virustotal.com/vtapi/v2/file/scan"
    params = {"apikey": api_key}
    files = {"file": ("file", open(file_path, "rb"))}
    response = requests.post(url, params=params, files=files)
    return response.json()

def submit_file_to_hybrid_analysis(file_path, api_key):
    url = "https://www.hybrid-analysis.com/api/v2/submit/file"
    headers = {"user-agent": "Fiddler", "api-key": api_key}
    files = {"file": ("file", open(file_path, "rb"))}
    response = requests.post(url, headers=headers, files=files)
    return response.json()

def submit_file_to_joe_sandbox(file_path, api_key):
    url = "https://www.joesandbox.com/api/submit/file"
    payload = {"apikey": api_key}
    files = {"file": ("file", open(file_path, "rb"))}
    response = requests.post(url, data=payload, files=files)
    return response.json()

def submit_file_to_any_run(file_path, api_key):
    url = "https://api.any.run/v1/analysis/file"
    headers = {"Authorization": f"Bearer {api_key}"}
    files = {"file": ("file", open(file_path, "rb"))}
    response = requests.post(url, headers=headers, files=files)
    return response.json()

def submit_files_to_apis(file_paths, apis):
    malware_bazar_results = []
    virus_total_results = []
    hybrid_analysis_results = []
    joe_sandbox_results = []
    any_run_results = []

    for file_path in tqdm(file_paths):
        if apis == "all" or "malware_bazar" in apis:
            if MALWARE_BAZAR_API_KEY:
                malware_bazar_results.append(submit_file_to_malware_bazar(file_path, MALWARE_BAZAR_API_KEY))
        if apis == "all" or "virus_total" in apis:
            if VIRUS_TOTAL_API_KEY:
                virus_total_results.append(submit_file_to_virus_total(file_path, VIRUS_TOTAL_API_KEY))
        if apis == "all" or "hybrid_analysis" in apis:
            if HYBRID_ANALYSIS_API_KEY:
                hybrid_analysis_results.append(submit_file_to_hybrid_analysis(file_path, HYBRID_ANALYSIS_API_KEY))
        if apis == "all" or "joe_sandbox" in apis:
            if JOE_SANDBOX_API_KEY:
                joe_sandbox_results.append(submit_file_to_joe_sandbox(file_path, JOE_SANDBOX_API_KEY))
        if apis == "all" or "any_run" in apis:
            if ANY_RUN_API_KEY:
                any_run_results.append(submit_file_to_any_run(file_path, ANY_RUN_API_KEY))

    return {
        "Malware Bazar": malware_bazar_results,
        "Virus Total": virus_total_results,
        "Hybrid Analysis": hybrid_analysis_results,
        "Joe Sandbox": joe_sandbox_results,
        "Any.run": any_run_results,
    }


def write_results_to_csv(file_path, results):
    with open(file_path, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["API", "File", "Result"])
        for api, api_results in results.items():
            for i, result in enumerate(api_results):
                writer.writerow([api, f"File {i+1}", json.dumps(result)])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("file_paths", nargs="+", help="Path(s) to file(s) to be submitted")
    parser.add_argument("--apis", nargs="+", choices=["all", "malware_bazar", "virus_total", "hybrid_analysis", "joe_sandbox", "any_run"], default="all", help="API(s) to use for scanning")
    parser.add_argument("--results_file", default="results.csv", help="Name of file to save the results")
    args = parser.parse_args()

    file_paths = args.file_paths
    apis = args.apis
    results_file = args.results_file

    results = submit_files_to_apis(file_paths, apis)
    write_results_to_csv(results_file, results)

if __name__ == "__main__":
    main()
